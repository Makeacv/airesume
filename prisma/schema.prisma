generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String   @id
  email         String?  @unique
  role          Role     @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  resumes           Resume[]
  userSubscription  UserSubscription?

  @@map("users")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model Resume {
  id              String           @id @default(cuid())
  userId          String
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  title           String?
  description     String?
  photoUrl        String?
  colorHex        String           @default("#000000")
  borderStyle     String           @default("squircle")
  summary         String?
  firstName       String?
  lastName        String?
  jobTitle        String?
  city            String?
  country         String?
  phone           String?
  email           String?
  nationality     String?
  idNumber        String?
  skills          String[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  driverLicense   Boolean?
  educations      Education[]
  workExperiences WorkExperience[]

  @@map("resumes")
}

model WorkExperience {
  id          String    @id @default(cuid())
  position    String?
  company     String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
  resumeId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("work_experiences")
}

model Education {
  id        String    @id @default(cuid())
  degree    String?
  school    String?
  startDate DateTime?
  endDate   DateTime?
  resumeId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  resume    Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("educations")
}

model UserSubscription {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  user                    User?    @relation(fields: [userId], references: [id])
  stripeCustomerId        String   @unique
  stripeSubscriptionId    String   @unique
  stripePriceId           String
  stripeCurrentPeriodEnd  DateTime
  stripeCancelAtPeriodEnd Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("user_subscriptions")
}

model Blog {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String?
  content     String
  contentHtml String?
  coverImage  String?
  author      String?
  tags        String[]
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(false)
}
